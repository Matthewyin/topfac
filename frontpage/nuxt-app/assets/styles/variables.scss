// 响应式断点定义
$grid-breakpoints: (
  xs: 0,
  sm: 600px,
  md: 960px,
  lg: 1264px,
  xl: 1904px,
  xxl: 2560px
);

// 容器最大宽度
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

// 间距系统
$spacers: (
  0: 0,
  1: 4px,
  2: 8px,
  3: 12px,
  4: 16px,
  5: 20px,
  6: 24px,
  7: 28px,
  8: 32px,
  9: 36px,
  10: 40px,
  12: 48px,
  16: 64px,
  20: 80px,
  24: 96px
);

// 字体大小
$font-sizes: (
  xs: 0.75rem,    // 12px
  sm: 0.875rem,   // 14px
  base: 1rem,     // 16px
  lg: 1.125rem,   // 18px
  xl: 1.25rem,    // 20px
  2xl: 1.5rem,    // 24px
  3xl: 1.875rem,  // 30px
  4xl: 2.25rem,   // 36px
  5xl: 3rem       // 48px
);

// 阴影系统
$shadows: (
  sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05),
  base: (0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)),
  md: (0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)),
  lg: (0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)),
  xl: (0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)),
  2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25)
);

// 圆角系统
$border-radius: (
  none: 0,
  sm: 0.125rem,   // 2px
  base: 0.25rem,  // 4px
  md: 0.375rem,   // 6px
  lg: 0.5rem,     // 8px
  xl: 0.75rem,    // 12px
  2xl: 1rem,      // 16px
  3xl: 1.5rem,    // 24px
  full: 9999px
);

// 颜色系统
$colors: (
  primary: #1976d2,
  secondary: #424242,
  success: #4CAF50,
  info: #2196F3,
  warning: #FF9800,
  error: #F44336,
  surface: #FFFFFF,
  background: #F5F5F5,
  on-surface: #212121,
  on-background: #212121
);

@use 'sass:map';

// 响应式混合器
@mixin respond-to($breakpoint) {
  @if map.has-key($grid-breakpoints, $breakpoint) {
    @media (min-width: map.get($grid-breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map.keys($grid-breakpoints)}.";
  }
}

// 容器混合器
@mixin container() {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: 16px;
  padding-right: 16px;

  @include respond-to(sm) {
    max-width: map.get($container-max-widths, sm);
  }

  @include respond-to(md) {
    max-width: map.get($container-max-widths, md);
  }

  @include respond-to(lg) {
    max-width: map.get($container-max-widths, lg);
  }

  @include respond-to(xl) {
    max-width: map.get($container-max-widths, xl);
  }

  @include respond-to(xxl) {
    max-width: map.get($container-max-widths, xxl);
  }
}

// 网格系统混合器
@mixin make-col($size, $columns: 12) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

// 文本截断混合器
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// 多行文本截断混合器
@mixin text-truncate-lines($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// 卡片阴影混合器
@mixin card-shadow($level: base) {
  box-shadow: map.get($shadows, $level);
  transition: box-shadow 0.3s ease;

  &:hover {
    @if $level == sm {
      box-shadow: map.get($shadows, base);
    } @else if $level == base {
      box-shadow: map.get($shadows, md);
    } @else if $level == md {
      box-shadow: map.get($shadows, lg);
    } @else {
      box-shadow: map.get($shadows, xl);
    }
  }
} 